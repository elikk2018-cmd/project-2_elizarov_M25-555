"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
"""

from .constants import (
    CACHE_ENABLED,
    ERROR_MESSAGE_INVALID_COLUMN_FORMAT,
    ERROR_MESSAGE_INVALID_TYPE,
    ERROR_MESSAGE_TABLE_EXISTS,
    ERROR_MESSAGE_TABLE_NOT_EXISTS,
    SUCCESS_MESSAGE_TABLE_CREATED,
    SUCCESS_MESSAGE_TABLE_DROPPED,
    VALID_TYPES,
)
from .decorators import cacher, confirm_action, handle_db_errors, log_time
from .parser import parse_values
from .utils import load_table_data, save_metadata, save_table_data


@handle_db_errors
def create_table(metadata, table_name, columns):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    if table_name in metadata:
        print(ERROR_MESSAGE_TABLE_EXISTS.format(table_name))
        return metadata

    columns_with_id = [('ID', 'int')]

    for column in columns:
        try:
            col_name, col_type = column.split(':')
            if col_type not in VALID_TYPES:
                print(ERROR_MESSAGE_INVALID_TYPE.format(col_type))
                return metadata
            columns_with_id.append((col_name, col_type))
        except ValueError:
            print(ERROR_MESSAGE_INVALID_COLUMN_FORMAT.format(column))
            return metadata

    table_structure = {col[0]: col[1] for col in columns_with_id}
    metadata[table_name] = table_structure

    columns_str = ", ".join([f"{col[0]}:{col[1]}" for col in columns_with_id])
    print(SUCCESS_MESSAGE_TABLE_CREATED.format(table_name, columns_str))

    save_metadata(metadata)
    return metadata


@handle_db_errors
@confirm_action("—É–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã")
def drop_table(metadata, table_name):
    """
    –£–¥–∞–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    if table_name not in metadata:
        print(ERROR_MESSAGE_TABLE_NOT_EXISTS.format(table_name))
        return metadata

    del metadata[table_name]
    print(SUCCESS_MESSAGE_TABLE_DROPPED.format(table_name))

    save_metadata(metadata)
    return metadata


@handle_db_errors
def list_tables(metadata):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    if not metadata:
        print("üì≠ –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü.")
    else:
        print("üìã –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü:")
        for table_name in metadata:
            print(f"  - {table_name}")


@handle_db_errors
@log_time
def insert(metadata, table_name, values_str):
    """
    –í—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É.
    """
    if table_name not in metadata:
        print(f'‚ùå –û—à–∏–±–∫–∞: –¢–∞–±–ª–∏—Ü–∞ "{table_name}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
        return

    # –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏—è
    try:
        values = parse_values(values_str)
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–Ω–∞—á–µ–Ω–∏–π: {e}')
        return

    table_structure = metadata[table_name]
    data_columns = [col for col in table_structure.keys() if col != 'ID']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π
    if len(values) != len(data_columns):
        print(f'‚ùå –û—à–∏–±–∫–∞: –û–∂–∏–¥–∞–ª–æ—Å—å {len(data_columns)} –∑–Ω–∞—á–µ–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–æ {len(values)}.')
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    table_data = load_table_data(table_name)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID
    if table_data:
        new_id = max(item['ID'] for item in table_data) + 1
    else:
        new_id = 1

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    new_record = {'ID': new_id}

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    for i, column in enumerate(data_columns):
        value = values[i]
        col_type = table_structure[column]

        try:
            if col_type == 'int':
                new_record[column] = int(value)
            elif col_type == 'bool':
                if value.lower() in ['true', '1', 'yes', '–¥–∞']:
                    new_record[column] = True
                elif value.lower() in ['false', '0', 'no', '–Ω–µ—Ç']:
                    new_record[column] = False
                else:
                    raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ: {value}")
            else:  # str
                if (value.startswith('"') and value.endswith('"')) or \
                   (value.startswith("'") and value.endswith("'")):
                    value = value[1:-1]
                new_record[column] = value
        except ValueError as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ {column}: {e}')
            return

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    table_data.append(new_record)
    save_table_data(table_name, table_data)
    print(f'‚úÖ –ó–∞–ø–∏—Å—å —Å ID={new_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É "{table_name}".')


def _perform_select(metadata, table_name, where_clause=None):
    """
    –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SELECT (–æ—Ç–¥–µ–ª–µ–Ω–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è).
    """
    from prettytable import PrettyTable

    from .utils import load_table_data

    table_data = load_table_data(table_name)

    if not table_data:
        print("üì≠ –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å —É—Å–ª–æ–≤–∏–µ
    if where_clause:
        column, value = where_clause
        filtered_data = []
        for record in table_data:
            record_value = record.get(column)
            if str(record_value) == value:
                filtered_data.append(record)
        table_data = filtered_data

    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤—ã–≤–æ–¥–∞
    table = PrettyTable()
    table.field_names = metadata[table_name].keys()

    for record in table_data:
        row = [record.get(field, '') for field in table.field_names]
        table.add_row(row)

    print(table)


@handle_db_errors
@log_time
def select(metadata, table_name, where_clause=None):
    """
    –í—ã–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.
    """
    if table_name not in metadata:
        print(f'‚ùå –û—à–∏–±–∫–∞: –¢–∞–±–ª–∏—Ü–∞ "{table_name}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    if CACHE_ENABLED and where_clause:
        cache_key = f"select_{table_name}_{where_clause[0]}_{where_clause[1]}"
        cacher(cache_key, lambda: _perform_select(metadata, table_name, where_clause))
    else:
        _perform_select(metadata, table_name, where_clause)


@handle_db_errors
@log_time
def update(metadata, table_name, set_clause, where_clause):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ.
    """
    if table_name not in metadata:
        print(f'‚ùå –û—à–∏–±–∫–∞: –¢–∞–±–ª–∏—Ü–∞ "{table_name}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
        return

    table_data = load_table_data(table_name)
    table_structure = metadata[table_name]
    updated_count = 0

    set_column, new_value = set_clause
    where_column, where_value = where_clause

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
    if set_column not in table_structure:
        print(f'‚ùå –û—à–∏–±–∫–∞: –°—Ç–æ–ª–±–µ—Ü "{set_column}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
        return

    if where_column not in table_structure:
        print(f'‚ùå –û—à–∏–±–∫–∞: –°—Ç–æ–ª–±–µ—Ü "{where_column}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏
    for record in table_data:
        if str(record.get(where_column)) == where_value:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–∏–ø—É
            col_type = table_structure[set_column]
            try:
                if col_type == 'int':
                    record[set_column] = int(new_value)
                elif col_type == 'bool':
                    if new_value.lower() in ['true', '1', 'yes', '–¥–∞']:
                        record[set_column] = True
                    elif new_value.lower() in ['false', '0', 'no', '–Ω–µ—Ç']:
                        record[set_column] = False
                    else:
                        raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_value}")
                else:  # str
                    record[set_column] = new_value
                updated_count += 1
            except ValueError as e:
                print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞: {e}')
                return

    if updated_count > 0:
        save_table_data(table_name, table_data)
        print(f'‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ "{table_name}".')
    else:
        print('‚ùå –ó–∞–ø–∏—Å–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')


@handle_db_errors
@confirm_action("—É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π")
@log_time
def delete(metadata, table_name, where_clause):
    """
    –£–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.
    """
    if table_name not in metadata:
        print(f'‚ùå –û—à–∏–±–∫–∞: –¢–∞–±–ª–∏—Ü–∞ "{table_name}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
        return

    table_data = load_table_data(table_name)
    where_column, where_value = where_clause

    if where_column not in metadata[table_name]:
        print(f'‚ùå –û—à–∏–±–∫–∞: –°—Ç–æ–ª–±–µ—Ü "{where_column}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏
    original_count = len(table_data)
    table_data = [record for record in table_data 
                 if str(record.get(where_column)) != where_value]

    deleted_count = original_count - len(table_data)

    if deleted_count > 0:
        save_table_data(table_name, table_data)
        print(f'‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã "{table_name}".')
    else:
        print('‚ùå –ó–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')


@handle_db_errors
def info(metadata, table_name):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ.
    """
    if table_name not in metadata:
        print(f'‚ùå –û—à–∏–±–∫–∞: –¢–∞–±–ª–∏—Ü–∞ "{table_name}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
        return

    table_structure = metadata[table_name]
    table_data = load_table_data(table_name)

    print(f'üìä –¢–∞–±–ª–∏—Ü–∞: {table_name}')
    columns_str = ", ".join([f"{col}:{typ}" for col, typ in table_structure.items()])
    print(f'üìù –°—Ç–æ–ª–±—Ü—ã: {columns_str}')
    print(f'üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(table_data)}')
