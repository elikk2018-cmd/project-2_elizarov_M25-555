"""
–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫.
"""

import functools
import time

from .constants import CONFIRM_MESSAGES, ERROR_MESSAGES


def handle_db_errors(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except FileNotFoundError:
            print(ERROR_MESSAGES["FILE_NOT_FOUND"])
        except KeyError as e:
            print(ERROR_MESSAGES["KEY_ERROR"].format(e))
        except ValueError as e:
            print(ERROR_MESSAGES["VALUE_ERROR"].format(e))
        except Exception as e:
            print(ERROR_MESSAGES["UNEXPECTED_ERROR"].format(e))
    return wrapper


def confirm_action(action_name):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            template = '‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å "{}"? [y/n]: '
            prompt = template.format(action_name)
            response = input(prompt).strip().lower()
            if response == 'y':
                return func(*args, **kwargs)
            else:
                print(CONFIRM_MESSAGES["ACTION_CANCELLED"])
                return None
        return wrapper
    return decorator


def log_time(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        start_time = time.monotonic()
        result = func(*args, **kwargs)
        end_time = time.monotonic()
        execution_time = end_time - start_time
        msg = f"‚è±Ô∏è  –§—É–Ω–∫—Ü–∏—è {func.__name__} –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –∑–∞ {execution_time:.3f} —Å–µ–∫—É–Ω–¥"
        print(msg)
        return result
    return wrapper


def create_cacher():
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à–µ—Ä–∞ —Å –∑–∞–º—ã–∫–∞–Ω–∏–µ–º.
    """
    cache = {}
    
    def cache_result(key, value_func):
        if key in cache:
            msg = f"‚ôªÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–ª—é—á–∞: {key}"
            print(msg)
            return cache[key]
        else:
            value = value_func()
            cache[key] = value
            msg = f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è –∫–ª—é—á–∞: {key}"
            print(msg)
            return value
    
    return cache_result


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–µ—Ä–∞
cacher = create_cacher()
