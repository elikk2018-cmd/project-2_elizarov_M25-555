"""
–ú–æ–¥—É–ª—å –¥–≤–∏–∂–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
"""

import shlex

from .core import (
    create_table,
    delete,
    drop_table,
    info,
    insert,
    list_tables,
    select,
    update,
)
from .decorators import handle_db_errors
from .parser import parse_set, parse_where
from .utils import load_metadata


@handle_db_errors
def run():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    print("üöÄ *** –ü–†–ò–ú–ò–¢–ò–í–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–• ***")
    print("üìñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    print_crud_help()

    while True:
        try:
            user_input = input("\n>>> –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ").strip()
            if not user_input:
                continue

            parts = shlex.split(user_input)
            command = parts[0].lower()

            if command == 'exit':
                print("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif command == 'help':
                print_crud_help()
            else:
                metadata = load_metadata()

                # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü–∞–º–∏
                if command == 'create_table':
                    if len(parts) < 3:
                        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")
                        print("üìù –§–æ—Ä–º–∞—Ç: create_table <–∏–º—è> <—Å—Ç–æ–ª–±–µ—Ü1:—Ç–∏–ø> ...")
                    else:
                        table_name = parts[1]
                        columns = parts[2:]
                        create_table(metadata, table_name, columns)

                elif command == 'drop_table':
                    if len(parts) < 2:
                        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã.")
                    else:
                        table_name = parts[1]
                        drop_table(metadata, table_name)

                elif command == 'list_tables':
                    list_tables(metadata)

                # CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
                elif command == 'insert':
                    if len(parts) >= 4 and parts[1] == 'into' and parts[3] == 'values':
                        table_name = parts[2]
                        values_str = ' '.join(parts[4:])
                        insert(metadata, table_name, values_str)
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã insert.")
                        msg = "üìù –§–æ—Ä–º–∞—Ç: insert into <—Ç–∞–±–ª–∏—Ü–∞> values (–∑–Ω–∞—á–µ–Ω–∏–µ1, ...)"
                        print(msg)

                elif command == 'select':
                    if len(parts) >= 3 and parts[1] == 'from':
                        table_name = parts[2]
                        if len(parts) > 4 and parts[3] == 'where':
                            try:
                                where_clause = parse_where(parts[4:])
                                select(metadata, table_name, where_clause)
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —É—Å–ª–æ–≤–∏—è WHERE: {e}")
                        else:
                            select(metadata, table_name)
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã select.")
                        msg1 = "üìù –§–æ—Ä–º–∞—Ç: select from <—Ç–∞–±–ª–∏—Ü–∞>"
                        msg2 = "       [where —Å—Ç–æ–ª–±–µ—Ü=–∑–Ω–∞—á–µ–Ω–∏–µ]"
                        print(msg1)
                        print(msg2)

                elif command == 'update':
                    if len(parts) >= 8 and parts[2] == 'set' and parts[5] == 'where':
                        table_name = parts[1]
                        try:
                            set_clause = parse_set(parts[3:5])
                            where_clause = parse_where(parts[6:8])
                            update(metadata, table_name, set_clause, where_clause)
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã update.")
                        msg1 = "üìù –§–æ—Ä–º–∞—Ç: update <—Ç–∞–±–ª–∏—Ü–∞> set —Å—Ç–æ–ª–±–µ—Ü=–∑–Ω–∞—á–µ–Ω–∏–µ"
                        msg2 = "       where —Å—Ç–æ–ª–±–µ—Ü=–∑–Ω–∞—á–µ–Ω–∏–µ"
                        print(msg1)
                        print(msg2)

                elif command == 'delete':
                    if len(parts) >= 5 and parts[1] == 'from' and parts[3] == 'where':
                        table_name = parts[2]
                        try:
                            where_clause = parse_where(parts[4:6])
                            delete(metadata, table_name, where_clause)
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —É—Å–ª–æ–≤–∏—è WHERE: {e}")
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã delete.")
                        msg = "üìù –§–æ—Ä–º–∞—Ç: delete from <—Ç–∞–±–ª–∏—Ü–∞> where —Å—Ç–æ–ª–±–µ—Ü=–∑–Ω–∞—á–µ–Ω–∏–µ"
                        print(msg)

                elif command == 'info':
                    if len(parts) >= 2:
                        table_name = parts[1]
                        info(metadata, table_name)
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã.")

                else:
                    print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '{command}'")
                    print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'help' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")

        except KeyboardInterrupt:
            print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


def print_crud_help():
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.
    """
    print("\n" + "="*50)
    print("üéØ **–î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´**")
    print("="*50)
    
    print("\nüìä **–û–ü–ï–†–ê–¶–ò–ò –° –î–ê–ù–ù–´–ú–ò:**")
    msg1 = "  insert into <—Ç–∞–±–ª–∏—Ü–∞> values (–∑–Ω–∞—á1, –∑–Ω–∞—á2, ...)"
    print(msg1 + " - —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å")
    msg2 = "  select from <—Ç–∞–±–ª–∏—Ü–∞> [where —Å—Ç–æ–ª–±–µ—Ü=–∑–Ω–∞—á–µ–Ω–∏–µ]"
    print(msg2 + "   - –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–ø–∏—Å–∏")
    msg3 = "  update <—Ç–∞–±–ª–∏—Ü–∞> set —Å—Ç–æ–ª–±–µ—Ü=–∑–Ω–∞—á–µ–Ω–∏–µ where ..."
    print(msg3 + "  - –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
    msg4 = "  delete from <—Ç–∞–±–ª–∏—Ü–∞> where —Å—Ç–æ–ª–±–µ—Ü=–∑–Ω–∞—á–µ–Ω–∏–µ"
    print(msg4 + "     - —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å")
    print("  info <—Ç–∞–±–ª–∏—Ü–∞>                                   - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    
    print("\nüóÇÔ∏è  **–£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ê–ë–õ–ò–¶–ê–ú–ò:**")
    msg5 = "  create_table <—Ç–∞–±–ª–∏—Ü–∞> <—Å—Ç–æ–ª–±–µ—Ü1:—Ç–∏–ø> ..."
    print(msg5 + "        - —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É")
    print("  list_tables                                       - —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü")
    print("  drop_table <—Ç–∞–±–ª–∏—Ü–∞>                              - —É–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É")
    
    print("\nüîß **–û–ë–©–ò–ï –ö–û–ú–ê–ù–î–´:**")
    print("  exit                                              - –≤—ã—Ö–æ–¥")
    print("  help                                              - —Å–ø—Ä–∞–≤–∫–∞")
    
    print("\nüí° **–ü–†–ò–ú–ï–†–´:**")
    print("  create_table users name:str age:int is_active:bool")
    print("  insert into users values (\"–ò–≤–∞–Ω\", 25, true)")
    print("  select from users where age = 25")
    print("="*50)
